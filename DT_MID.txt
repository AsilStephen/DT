10.24 8:25â€¯AM
DT_MID
RMI ARITHMETIC 
ServerInterface.java
import java.rmi.*;  
importjava.rmi.server.*;  

public interface servinterface extends Remote  
 {  
public double add(double a,double b) throws RemoteException;  
public double sub(double a,double b) throws RemoteException;  
public double mul(double a,double b) throws RemoteException;  
public double div(double a,double b) throws RemoteException;  
public double mod(double a,double b) throws RemoteException;  
 }  

Servimpl.java
importjava.rmi.*;   
importjava.rmi.server.*;   

public class servimpl extends UnicastRemoteObject implements servinterface
  {   
publicservimpl() throws RemoteException
    {   
super();   
    }   

public double add(double a,double b)   
    {   
return(a+b);   
    }   
public double sub(double a,double b)   
    {   
return(a-b);   
    }   
public double mul(double a,double b)   
    {   
return(a*b);   
    }   
public double div(double a,double b)   
    {   
return(a/b);   
    }   
public double mod(double a,double b)   
    {   
return(a%b);   
    }   
  }   
Server.java
importjava.rmi.*;  
importjava.rmi.server.*;  
importjava.rmi.registry.*;  

public class server extends servimpl
 {  
public server() throws RemoteException
      {  
      }  

public static void main(String args[]) throws RemoteException
      {  
try
           {  
                Registry reg = LocateRegistry.createRegistry(9090);  
servimpl s = new servimpl();  
reg.rebind("server",s);  
System.out.println("server is ready!");  
           }  
catch(Exception e)  
           {  
System.out.println(e);  
           }  
      }  
 }  

Client.java
importjava.rmi.*;  
importjava.rmi.server.*;  
importjava.rmi.registry.*;  

public class client   
 {  
public static void main(String args[])throws RemoteException
      {  
try
           {  
                Double a = Double.valueOf(args[0]);  
                Double b = Double.valueOf(args[1]); 
		Registry reg=LocateRegistry.getRegistry("127.0.0.1",9090);  
servinterfacei = (servinterface)reg.lookup("server"); 
				
System.out.println("First number: "+a);  
System.out.println("Second number: "+b);  
				
System.out.println("Add:\t"+i.add(a,b));  
System.out.println("Sub:\t"+i.sub(a,b));  
System.out.println("Mul:\t"+i.mul(a,b));  
System.out.println("Div:\t"+i.div(a,b));  
System.out.println("Mod:\t"+i.mod(a,b));  
           }  
catch(Exception e)  
           {  
System.out.println(e);  
           }  
      }  
 }  


RMI FACTORIAL 

factServer.java
import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*;
public class factServer
{
    public static void main(String args[])
    {
        //System.setSecurityManager(new RMISecurityManager());
        try
        {
            factImpl pim = new factImpl();
		Naming.rebind("mani", pim);
            System.out.println("\n Server is ready...");
        }
        catch(Exception e) { }
    }
}    


factClient.java
import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*;
import java.io.*;
import java.net.*;

public class factClient
{
    public static void main(String args[]) throws RemoteException 
    {
                try
        {
            int factorial;
            int Number=0;
	 
String mani="rmi://Localhost/mani";
	
            	factInterface pi = (factInterface) Naming.lookup(mani);

BufferedReader ber=new BufferedReader(new InputStreamReader(System.in));
        
            System.out.print("\n Enter Number for Factorial : ");
            String temp=ber.readLine();
            Number = Integer.parseInt(temp);

            factorial = pi.find_fact(Number);
            System.out.println("Factorial is : " + factorial);

        }
        catch(Exception e) 
        { 
            System.out.println("System Exception" + e);
        }
    }
}    

factImpl.java
import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.UnicastRemoteObject;
public class factImpl extends UnicastRemoteObject implements factInterface
{
    public factImpl() throws RemoteException
    {
        super();
        try
        {
            //Naming.rebind(name,this);
        }
        catch(Exception e) { }
    }
    public int find_fact(int n1) throws RemoteException
    {
        int ans=n1;
        n1--;
        while(n1 > 0)
        {
            ans = ans * n1;
            n1--;
        }
        return ans;
    }
}


factInterface.java
public interface factInterface extends java.rmi.Remote
{
    int find_fact(int n) throws java.rmi.RemoteException;
}

JSP SCRIPTLET 
<%@ page import="java.sql.*" %>
<%
    Connection conn = null;
    Statement stmt = null;
    ResultSet rs = null;

    // Get action and parameters from request
    String action = request.getParameter("action");
    String id = request.getParameter("id");
    String name = request.getParameter("name");

    try {
        // Initialize driver class
        Class.forName("oracle.jdbc.driver.OracleDriver");
    } catch (Exception e) {
        out.println("Failed to initialize Oracle JDBC driver: " + e.toString() + "<P>");
    }

    String dbUser = "mani";
    String dbPasswd = "mani";
    String dbURL = "jdbc:oracle:thin:@localhost:1521:XE";

    try {
        // Connect
        conn = DriverManager.getConnection(dbURL, dbUser, dbPasswd);
        conn.setAutoCommit(false); // Disable auto-commit mode
       // out.println("Connection status: " + conn + "<P>");

        // Create statement
        stmt = conn.createStatement();
        
        if ("insert".equals(action)) {
            // Insert
            try {
                String sql = "insert into employee (id, name) values (" + id + ", '" + name + "')";
                int numRowsAffected = stmt.executeUpdate(sql);
                out.println(numRowsAffected + " employee(s) inserted. <BR>");
            } catch (SQLException e) {
                out.println("Error encountered during row insertion for employee: " + e.toString() + "<BR>");
            }
        } else if ("update".equals(action)) {
            // Update
            try {
                String sql = "update employee set name='" + name + "' where id=" + id;
                int numRowsAffected = stmt.executeUpdate(sql);
                out.println(numRowsAffected + " employee(s) updated. <BR>");
            } catch (SQLException e) {
                out.println("Error encountered during update for employee: " + e.toString() + "<BR>");
            }
        } else if ("delete".equals(action)) {
            // Delete
            try {
                String sql = "delete from employee where id=" + id;
                int numRowsAffected = stmt.executeUpdate(sql);
                out.println(numRowsAffected + " employee(s) deleted. <BR>");
            } catch (SQLException e) {
                out.println("Error encountered during deletion of employee: " + e.toString() + "<BR>");
            }
        }

        // Select (View all)
        String sql = "select id, name from employee";
        rs = stmt.executeQuery(sql);
        while (rs.next()) {
            out.println("Id = " + rs.getString("ID") + ", Name = " + rs.getString("NAME") + "<BR>");
        }
        out.println("<P>");

        // Commit
        conn.commit();
    } catch (Exception e) {
        out.println("Connection failed: " + e.toString() + "<P>");
        if (conn != null) {
            try {
                conn.rollback();
            } catch (SQLException rollbackException) {
                out.println("Rollback failed: " + rollbackException.toString() + "<P>");
            }
        }
    } finally {
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            out.println("Error closing resources: " + e.toString() + "<P>");
        }
    }
%>

<HTML>
<BODY>
    <form method="post" action="employee.jsp">
        Action: <select name="action">
            <option value="insert">Insert</option>
            <option value="update">Update</option>
            <option value="delete">Delete</option>
        </select><br>
        ID: <input type="text" name="id"><br>
        Name: <input type="text" name="name"><br>
        <input type="submit" value="Submit">
    </form>
    <br>
    Bye bye! The system time is now <%= new java.util.Date() %>
</BODY>
</HTML>

JSP BEAN

College.java
package col;
public class College{
    String name;
    String rector;
    String secretary;
    String principal;

public void setName(String n) {name=n;}
public void setRector(String r) {rector = r;}
public void setSecretary(String s) {secretary = s;}
public void setPrincipal(String p) {principal = p;}

public String getName(){return name;}
public String getRector(){return rector;}
public String getSecretary(){return secretary;}
public String getPrincipal(){return principal;}
}

Usebean.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="col.College"%>

<jsp:useBean id="college"  class="col.College">
<%-- intialize bean properties --%>
<jsp:setProperty name="college" property="name" value="St. Joseph's College (Autonomous), Tiruchirappalli-620002"/>
<jsp:setProperty name="college" property="rector" value="Rev. Dr. Pavulraj Michael SJ"/>
<jsp:setProperty name="college" property="secretary" value="Rev. Fr. K. Amal SJ"/>
<jsp:setProperty name="college" property="principal" value="Rev. Dr. S. Mariadoss SJ"/>
</jsp:useBean>

<html>
	<body>
	<h2>
	     College........  <jsp:getProperty name="college" property="name"/><br>
Rector..........	<jsp:getProperty name="college" property="rector"/><br>
Secretary.....	<jsp:getProperty name="college" property="secretary"/><br>
	     Principal.....	<jsp:getProperty name="college" property="principal"/>
	</body>
</html>

SERVLET 

StudentServlet.java
import java.io.IOException;

import java.io. PrintWriter;

import javax.servlet.ServletException; import javax.servlet.http.HttpServlet;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse; import java.util.ArrayList;

import java.util.List;

public class StudentServlet extends HttpServlet { private List students = new ArrayList();

protected void doPost(HttpServletRequest request, HttpServletResponse response)

throws ServletException, IOException {

String dno request.getParameter("dno"); String name = request.getParameter("name");

String department = request.getParameter("department");

// Create a new student object and add it to the list

Student student = new Student(dno, name, department);

students.add(student);

// Display the inserted student information

response.setContentType("text/html");

PrintWriter out = response.getWriter();

out.println("<html>");

out.println("<head><title>Student Info</title></head>");

out.println("<body>");

out.println("<h1>Student Information</h1>");

out.println("<table border='1'>");

out.println("<tr><th>Student Number</th><th>Name</

th><th>Department</th></tr>"); for (int i = 0; i < students.size(); i++) {

Student s = (Student) students.get(i); out.println("<tr><td>" + s.getDno() + "</td><td>" + s.getName() +

"< /td><td>" + s.getDepartment() + "</td></tr>");

}

out.println("</table>");

out.println("</body>");

out.println("</html>");

}

private class Student {

private String dno;

private String name;

private String department;

public Student(String dno, String name, String department) {

this.dno dno;

this.name = name;

this.department = department;

}

public String getDno() { return dno; }

public String getName() { return name; }

public String getDepartment() { return department; }

}}

Html
addstudent.html

addstudent.html

<!DOCTYPE html>

<html>

<head>

<title>Student Form</title>

</head>

<body>

<h1>Enter Student Details</h1>

<form

action="http://localhost:8050/examples/servlet/StudentServlet" method="post">

<label for="dno">Student Number:</label>

<input type="text" id="dno" name="dno"><br><br>

<label for="name">Name:</label>

<input type="text" id="name" name="name"><br><br>

<label for="department">Department:</label>

<input type="text" id="department" name="department"><br><br>

<input type="submit" value="Submit">

</form>

</body>

</html>
